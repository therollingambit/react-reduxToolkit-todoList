{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","Input","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","console","log","Date","now","TodoItem","Checkbox","checked","color","inputProps","App","useSelector","store","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAOMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aAPmB,CAEnBC,SAAU,IAMVC,SAAU,CAERC,SAAU,SAACC,EAAOC,GAEhBD,EAAMH,SAASK,KAAKD,EAAOE,UAG7BC,SAAU,SAACJ,EAAOC,GAChBD,EAAMH,SAASQ,KAAI,SAACC,GACdL,EAAOE,UAAYG,EAAKC,KACtBD,EAAKE,KAAMF,EAAKE,MAAO,EACtBF,EAAKE,MAAO,UASpB,EAA+Bf,EAAUgB,QAAjCV,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,SACZM,EAAiB,SAACV,GAAD,OAAWA,EAAMW,MAAMd,UACtCJ,IAAf,Q,OCHemB,EAvBD,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,cAajB,OACI,sBAAKC,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAACC,GAAD,OAAOP,EAASO,EAAEC,OAAOH,UACpE,wBAAQI,QAdA,WACZC,QAAQC,IAAR,iBAAsBZ,IAEtBE,EAASjB,EAAS,CACdO,KAAMQ,EACNN,MAAM,EACND,GAAIoB,KAAKC,SAEbb,EAAS,KAML,qB,gBCIGc,EApBE,SAAC,GAAwB,IAAtBlC,EAAqB,EAArBA,KAAMa,EAAe,EAAfA,KAAMD,EAAS,EAATA,GACtBS,EAAWC,cAMnB,OACE,sBAAKC,UAAU,WAAf,UACE,cAACY,EAAA,EAAD,CACEC,QAASvB,EACTwB,MAAM,UACNR,QATgB,WAChBR,EAASZ,EAASG,KASlB0B,WAAY,CAAE,aAAc,wBAE9B,mBAAGf,UAAWV,GAAQ,iBAAtB,SAAyCb,QCIhCuC,EAnBH,WACV,IAAMrC,EAAWsC,YAAYzB,GAE7B,OACE,qBAAKQ,UAAU,MAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,oBAAf,SAEIrB,EAASQ,KAAI,SAAAC,GAAI,OACf,cAAC,EAAD,CAAUX,KAAMW,EAAKA,KAAME,KAAMF,EAAKE,KAAMD,GAAID,EAAKC,UAI3D,cAAC,EAAD,UClBK6B,EAAQC,YAAe,CAClCC,QAAS,CACP3B,MAAO4B,KCEXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.66be03b7.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  //global states\n  todoList: [], //outsource const [todoList, setTodoList] = useState([]) here\n};\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    //change states in store\n    saveTodo: (state, action) => {\n      //action will have a payload\n      state.todoList.push(action.payload); //similar to setTodoList(action.payload)\n    },\n\n    setCheck: (state, action) => {\n      state.todoList.map((item) => {\n        if (action.payload === item.id) {\n          if (item.done) item.done = false;\n          else item.done = true;\n        }\n      });\n    },\n\n    // deleteItem: (state, action) => \n  },\n});\n\nexport const { saveTodo, setCheck } = todoSlice.actions; //export reducers\nexport const selectTodoList = (state) => state.todos.todoList; //export todoList state\nexport default todoSlice.reducer;\n","import React, { useState } from 'react'\nimport '../styles/Input.css';\n\nimport { useDispatch } from 'react-redux';\nimport { saveTodo } from '../features/todoSlice';\n\nconst Input = () => {\n    const [input, setInput] = useState('');\n    const dispatch = useDispatch()\n\n    const addTodo = () => {\n        console.log(`adding ${input}`);\n\n        dispatch(saveTodo({\n            item: input,\n            done: false,\n            id: Date.now() //unique\n        }))\n        setInput('') //clear input\n    }\n\n    return (\n        <div className='input'>\n            <input type=\"text\" value={input} onChange={(e) => setInput(e.target.value)} />\n            <button onClick={addTodo}>Add</button>\n        </div>\n    )\n}\n\nexport default Input;\n","import React from \"react\";\nimport \"../styles/TodoItem.css\";\n\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { useDispatch } from 'react-redux';\nimport { setCheck } from '../features/todoSlice';\n\nconst TodoItem = ({ name, done, id }) => {\n    const dispatch = useDispatch();\n\n    const handleCheck = () => {\n        dispatch(setCheck(id)) //id as payload of action\n    }\n\n  return (\n    <div className=\"todoItem\">\n      <Checkbox\n        checked={done}\n        color=\"primary\"\n        onClick={handleCheck}\n        inputProps={{ 'aria-label': 'secondary checkbox' }}\n      />\n      <p className={done && \"todoItem--done\"}>{name}</p>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/Input\";\nimport TodoItem from './components/TodoItem';\n\nimport { useSelector } from 'react-redux'; //grab the data\nimport { selectTodoList } from './features/todoSlice';\n\nconst App = () => {\n  const todoList = useSelector(selectTodoList);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-container\">\n        <div className=\"app-todoContainer\">\n          {\n            todoList.map(item => (\n              <TodoItem name={item.item} done={item.done} id={item.id} />\n            ))\n          }\n        </div>\n        <Input />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todoSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todos: todoReducer //set a new piece of state\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}